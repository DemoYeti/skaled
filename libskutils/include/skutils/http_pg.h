#if ( !defined SKUTILS_HTTP_PG_H )
#define SKUTILS_HTTP_PG_H 1

#include <atomic>

#include <folly/Memory.h>
#include <proxygen/httpserver/RequestHandler.h>

#include <folly/io/async/EventBaseManager.h>
//#include <folly/portability/GFlags.h>
#include <folly/portability/Unistd.h>
#include <proxygen/httpserver/HTTPServer.h>
#include <proxygen/httpserver/RequestHandlerFactory.h>

namespace proxygen {
class ResponseHandler;
}

namespace skutils {
namespace http_pg {

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class request_sink {
    std::atomic_uint64_t reqCount_{0};

public:
    request_sink();
    virtual ~request_sink();
    virtual void OnRecordRequestCountIncrement();
    virtual uint64_t getRequestCount();
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class request_site : public proxygen::RequestHandler {
    request_sink& sink_;
    std::unique_ptr< folly::IOBuf > body_;

public:
    explicit request_site( request_sink& a_sink );
    ~request_site() override;

    void onRequest( std::unique_ptr< proxygen::HTTPMessage > headers ) noexcept override;
    void onBody( std::unique_ptr< folly::IOBuf > body ) noexcept override;
    void onEOM() noexcept override;
    void onUpgrade( proxygen::UpgradeProtocol proto ) noexcept override;
    void requestComplete() noexcept override;
    void onError( proxygen::ProxygenError err ) noexcept override;
};  /// class request_site


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class request_site_factory : public proxygen::RequestHandlerFactory {
    folly::ThreadLocalPtr< request_sink > sink_;

public:
    request_site_factory();
    ~request_site_factory() override;
    void onServerStart( folly::EventBase* /*evb*/ ) noexcept override;
    void onServerStop() noexcept override;
    proxygen::RequestHandler* onRequest(
        proxygen::RequestHandler*, proxygen::HTTPMessage* ) noexcept override;
};  /// class request_site_factory

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class server {
    std::thread thread_;
    std::unique_ptr< proxygen::HTTPServer > server_;

public:
    server();
    virtual ~server();
    bool start();
    void stop();
};  /// class server

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

};  // namespace http_pg
};  // namespace skutils

#endif  /// SKUTILS_HTTP_PG_H
