name: Build and test skaled
on:
  push:
    branches-ignore:
      - 'master'
      - 'beta'
      - 'stable'
defaults:
  run:
    shell: bash
jobs:

  functional-tests:
    name: Functional tests
    runs-on: ubuntu-20.04
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      SKALED_RELEASE: 3.17.0-develop.1
      NO_ULIMIT_CHECK: 1
    steps:
    - uses: actions/checkout@v3
      with:
        repository: skalenetwork/skale-ci-integration_tests
        submodules: true
    - name: Set up Node 
      uses: actions/setup-node@v3.4.0
      with:
        node-version: 14
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install python3-pip python3-venv jq btrfs-progs nodejs npm
        sudo npm install -g truffle
        sudo npm install -g yarn
        sudo chown -R runner:runner ~/.config   # HACK
        
    - uses: docker-practice/actions-setup-docker@0.0.1

    - name: Prepare SGX keys/certs
      run: |
        echo "${{ secrets.sgx_key }}" > sgx_certs/sgx.key
        chmod 600 sgx_certs/sgx.key
        sudo mkdir /skale_node_data
        sudo cp -r sgx_certs /skale_node_data
        sudo chown -R runner:runner /skale_node_data/sgx_certs/*
        wc /skale_node_data/sgx_certs/sgx.key
    - name: Update Environment
      run: |
        ./update_environment.sh skaled+internals
        ./update_environment.sh skaled+load_python
        ./update_environment.sh skaled+load_js
        ./update_environment.sh skaled+contractsRunningTest
        ./update_environment.sh skaled+filestorage
        ./update_environment.sh skaled+api
    - name: skaled+internals+pytest
      run: SKALED_PROVIDER=skaled_providers/binary_from_container ./run_tests.sh skaled+internals+pytest

    - name: skaled+filestorage+all
      run: SKALED_PROVIDER=skaled_providers/endpoint_by_container ./run_tests.sh skaled+filestorage+all

    - name: skaled+contractsRunningTest+all
      run: SKALED_PROVIDER=skaled_providers/endpoint_by_container ./run_tests.sh skaled+contractsRunningTest+all

    - name: skaled+load_python+all
      run: SKALED_PROVIDER=skaled_providers/binary_from_container ./run_tests.sh skaled+load_python+all

    - name: skaled+load_js+run_angry_cats
      run: SKALED_PROVIDER=skaled_providers/endpoint_by_container ./run_tests.sh skaled+load_js+run_angry_cats

    - name: skaled+internals+test_snapshot_api
      run: SKALED_PROVIDER=skaled_providers/binary_from_container ./run_tests.sh skaled+internals+test_snapshot_api

    - name: skaled+internals+test_node_rotation
      run: SKALED_PROVIDER=skaled_providers/binary_from_container ./run_tests.sh skaled+internals+test_node_rotation

    - name: Fix access rights
      run: |
        sudo chown -R runner:runner /tmp/tmp* || true
        sudo find ./integration_tests/skaled/internals/third_party/skale-node-tests/btrfs -type d -exec btrfs property set {} ro false \; || true
        sudo chown -R runner:runner . || true
        for C in $(docker ps -aq); do docker logs $C>$C.log; done || true
      if: ${{ always() }}

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      continue-on-error: true
      with:
        name: debug
        path: |
          skaled_providers
          !skaled_providers/**/skaled
          /tmp/tmp*
          *.log
          ./integration_tests/skaled/internals/third_party/skale-node-tests/btrfs
          !**/.env
          
          
  build:
    needs: functional-tests
    runs-on: self-hosted
    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        NO_ULIMIT_CHECK: 1
        ccache_compress: 'true'
        ccache_compresslevel: 9
    steps:
      - name: Extract repo name
        run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: checkout
        uses: actions/checkout@v2
      - name: Cache apt packages
        uses: actions/cache@v2
        with:
          path: |
            /var/cache/apt/archives
          key: ${{ runner.os }}-apt-cache
          ttl: 1000000 # purge cache every 1000000 seconds (10 days). This is to pull updated packages
      - name: update apt
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test; sudo apt-get update
      - name: install packages
        run: |
          sudo apt-get -y remove libzmq* || true
          sudo apt-get -y install software-properties-common
          sudo apt-get -y install gcc-9 g++-9

      - name: Use g++-9 and gcov-9 by default
        run: |
          echo "Updating all needed alternatives"
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-9 9
          sudo update-alternatives --install /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-9 9
          sudo update-alternatives --install /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-9 9
          echo "Checking alternative for gcc"
          which gcc
          gcc --version
          echo "Checking alternative for g++"
          which g++
          g++ --version
          echo "Checking alternative for gcov"
          which gcov
          gcov --version
          echo "Checking alternative for gcov-dump"
          which gcov-dump
          gcov-dump --version
          echo "Checking alternative for gcov-tool"
          which gcov-tool
          gcov-tool --version

      - name: Get newest lcov
        run: |
          # sudo apt-get install libcapture-tiny-perl
          echo "Removing previous lcov version..."
          sudo apt-get remove lcov || true
          echo "Installing newest lcov version..."
          rm -rf newer_lcov || true
          mkdir newer_lcov
          cd newer_lcov
          git clone https://github.com/linux-test-project/lcov --recursive --recurse-submodules
          cd lcov
          git checkout 92e2121
          sudo make install
          cd ..
          cd ..
          echo "Checking installed lcov version..."
          which lcov
          lcov --version

      - name: Submodule update
        run: |
          rm -rf ./libconsensus || true
          ls -1
          git submodule update --init --recursive

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
          restore-keys: |
            ${ { matrix.config.name } }-ccache-
      - name: Update gcc-9
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9
      - name: Configure ccache cache size, zero ccache counters and print ccache stats before start
        run: |
          ccache --max-size=15G
          ccache -z
          ccache --show-stats
      - name: Build dependencies
        run: |
          
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd deps
          #######################################./clean.sh
          rm -f ./libwebsockets-from-git.tar.gz
          ./build.sh DEBUG=1 PARALLEL_COUNT=$(nproc)
          cd ..
      - name: Configure all
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          mkdir -p build
          cd build
          # -DCMAKE_C_FLAGS=-O3 -DCMAKE_CXX_FLAGS=-O3
          cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCOVERAGE=$CODE_COVERAGE ..
          cd ..
      - name: Print ccache stats for deps
        run: |
          ccache --show-stats
      - name: Build all
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make testeth -j$(nproc)
          cd ..
      - name: Print ccache stats after full build
        run : |
          ccache --show-stats
      - name: Testeth verbosity 1
        run : |
          #first run with verbosity 1. If test fails, rerun with verbosity 4
          cd build/test
          export NO_NTP_CHECK=1
          export NO_ULIMIT_CHECK=1          
          # we specifically run each test for easier log review
          ./testeth -t BlockchainTests -- --express && touch /tmp/BlockchainTestsPassed
          ./testeth -t TransactionTests -- --express && touch /tmp/TransactionTestsPassed
          ./testeth -t VMTests -- --express && touch /tmp/VMTestsPassed
          ./testeth -t LevelDBTests -- --express && touch /tmp/LevelDBTestsPassed
          ./testeth -t SharedSpaceTests -- --express && touch /tmp/SharedSpaceTestsPassed
          ./testeth -t SealEngineTests -- --express && touch /tmp/SealEngineTestsPassed  
          ./testeth -t BlockChainMainNetworkSuite -- --express && touch /tmp/BlockChainMainNetworkSuitePassed
          ./testeth -t BlockChainFrontierSuite -- --express && touch /tmp/BlockChainFrontierSuitePassed
          ./testeth -t BlockQueueSuite -- --express && touch /tmp/BlockQueueSuitePassed
          ./testeth -t ClientBase -- --express && touch /tmp/ClientBasePassed
          ./testeth -t EstimateGas -- --express && touch /tmp/EstimateGasPassed
          ./testeth -t IMABLSPublicKey -- --express && touch /tmp/IMABLSPublicKeyPassed
          ./testeth -t ExtVmSuite -- --express && touch /tmp/ExtVmSuitePassed
          ./testeth -t GasPricer -- --express && touch /tmp/GasPricerPassed
          ./testeth -t BasicTests -- --express && touch /tmp/BasicTestsPassed
          ./testeth -t InstanceMonitorSuite -- --express && touch /tmp/InstanceMonitorSuitePassed
          ./testeth -t PrecompiledTests -- --express && touch /tmp/PrecompiledTestsPassed
          ./testeth -t SkaleHostSuite -- --express && touch /tmp/SkaleHostSuitePassed
          ./testeth -t StateUnitTests -- --express && touch /tmp/StateUnitTestsPassed
          ./testeth -t libethereum -- --express && touch /tmp/libethereumPassed
          ./testeth -t TransactionQueueSuite -- --express && touch /tmp/TransactionQueueSuitePassed
          ./testeth -t LegacyVMSuite -- --express && touch /tmp/LegacyVMSuitePassed
          ./testeth -t SkaleInterpreterSuite -- --express && touch /tmp/SkaleInterpreterSuitePassed
          ./testeth -t SnapshotSigningTestSuite -- --express && touch /tmp/SnapshotSigningTestSuitePassed
          ./testeth -t SkUtils -- --express && touch /tmp/SkUtilsPassed
          ./testeth -t BlockChainTestSuite -- --express && touch /tmp/BlockChainTestSuitePassed
          ./testeth -t TestHelperSuite -- --express && touch /tmp/TestHelperSuitePassed
          ./testeth -t LevelDBHashBase -- --express && touch /tmp/LevelDBHashBasePassed
          ./testeth -t memDB -- --express && touch /tmp/memDBPassed
          ./testeth -t OverlayDBTests -- --express && touch /tmp/OverlayDBTestsPassed
          ./testeth -t AccountHolderTest -- --express && touch /tmp/AccountHolderTestPassed
          ./testeth -t ClientTests -- --express && touch /tmp/ClientTestsPassed
          ./testeth -t JsonRpcSuite  -- --express && touch /tmp/JsonRpcSuitePassed 
          ./testeth -t SingleConsensusTests  -- --express && touch /tmp/SingleConsensusTestsPassed
          ./testeth -t ConsensusTests  -- --express && touch /tmp/ConsensusTestsPassed
          cd ..
      - name: Testeth verbosity 4
        run : |
          # Since a tests failed, we are rerunning the failed test with higher verbosity          
          cd build/test      
          export NO_NTP_CHECK=1
          export NO_ULIMIT_CHECK=1          
          ls /tmp/BlockchainTestsPassed || ./testeth -t BlockchainTests -- --express --verbosity 4
          ls /tmp/TransactionTestsPassed || ./testeth -t TransactionTests -- --express --verbosity 4
          ls /tmp/VMTestsPassed || ./testeth -t VMTests -- --express --verbosity 4
          ls /tmp/LevelDBTestsPassed || ./testeth -t LevelDBTests -- --express --verbosity 4
          ls /tmp/SharedSpaceTestsPassed || ./testeth -t SharedSpaceTests -- --express --verbosity 4
          ls /tmp/SealEngineTestsPassed || ./testeth -t SealEngineTests -- --express --verbosity 4
          ls /tmp/BlockChainMainNetworkSuitePassed || ./testeth -t BlockChainMainNetworkSuite -- --express --verbosity 4
          ls /tmp/BlockChainFrontierSuitePassed || ./testeth -t BlockChainFrontierSuite -- --express --verbosity 4
          ls /tmp/BlockQueueSuitePassed || ./testeth -t BlockQueueSuite -- --express --verbosity 4
          ls /tmp/ClientBasePassed || ./testeth -t ClientBase -- --express --verbosity 4
          ls /tmp/EstimateGasPassed || ./testeth -t EstimateGas -- --express --verbosity 4
          ls /tmp/IMABLSPublicKeyPassed || ./testeth -t IMABLSPublicKey -- --express --verbosity 4
          ls /tmp/ExtVmSuitePassed || ./testeth -t ExtVmSuite -- --express --verbosity 4
          ls /tmp/GasPricerPassed || ./testeth -t GasPricer -- --express --verbosity 4
          ls /tmp/BasicTestsPassed || ./testeth -t BasicTests -- --express --verbosity 4
          ls /tmp/InstanceMonitorSuitePassed || ./testeth -t InstanceMonitorSuite -- --express --verbosity 4
          ls /tmp/PrecompiledTestsPassed || ./testeth -t PrecompiledTests -- --express --verbosity 4
          ls /tmp/SkaleHostSuitePassed || ./testeth -t SkaleHostSuite -- --express --verbosity 4
          ls /tmp/StateUnitTestsPassed || ./testeth -t StateUnitTests -- --express --verbosity 4
          ls /tmp/libethereumPassed || ./testeth -t libethereum -- --express --verbosity 4
          ls /tmp/TransactionQueueSuitePassed || ./testeth -t TransactionQueueSuite -- --express --verbosity 4
          ls /tmp/LegacyVMSuitePassed || ./testeth -t LegacyVMSuite -- --express --verbosity 4
          ls /tmp/SkaleInterpreterSuitePassed || ./testeth -t SkaleInterpreterSuite -- --express --verbosity 4
          ls /tmp/SnapshotSigningTestSuitePassed || ./testeth -t SnapshotSigningTestSuite -- --express --verbosity 4
          ls /tmp/SkUtilsPassed || ./testeth -t SkUtils -- --express --verbosity 4
          ls /tmp/BlockChainTestSuitePassed || ./testeth -t BlockChainTestSuite -- --express --verbosity 4
          ls /tmp/TestHelperSuitePassed || ./testeth -t TestHelperSuite -- --express --verbosity 4
          ls /tmp/LevelDBHashBasePassed || ./testeth -t LevelDBHashBase -- --express --verbosity 4
          ls /tmp/memDBPassed || ./testeth -t memDB -- --express --verbosity 4
          ls /tmp/OverlayDBTestsPassed || ./testeth -t OverlayDBTests -- --express --verbosity 4
          ls /tmp/AccountHolderTestPassed || ./testeth -t AccountHolderTest -- --express --verbosity 4
          ls /tmp/ClientTestsPassed || ./testeth -t ClientTests -- --express --verbosity 4
          ls /tmp/JsonRpcSuitePassed || ./testeth -t JsonRpcSuite  -- --express --verbosity 4 
          ls /tmp/SingleConsensusTestsPassed || ./testeth -t SingleConsensusTests  -- --express --verbosity 4
          ls /tmp/ConsensusTestsPassed || ./testeth -t ConsensusTests  -- --express --verbosity 4    
          cd ..
      - name: Configure all as historic
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          mkdir -p build
          cd build
          # -DCMAKE_C_FLAGS=-O3 -DCMAKE_CXX_FLAGS=-O3
          cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCOVERAGE=$CODE_COVERAGE -DHISTORIC_STATE=1 ..
          cd ..
      - name: Build all historic
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make testeth -j$(nproc)          
          cd ..
      - name: Print ccache stats after full historic build
        run : |
          ccache --show-stats
