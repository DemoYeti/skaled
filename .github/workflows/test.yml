name: Build and test skaled
on:
  push:
    branches-ignore:
      - 'develop'
      - 'master'
      - 'beta'
      - 'stable'
defaults:
  run:
    shell: bash
jobs:
  build:
    runs-on: self-hosted
    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        NO_ULIMIT_CHECK: 1
    steps:
      - name: Extract repo name
        run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: checkout
        uses: actions/checkout@v2

      - name: update apt
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test; sudo apt-get update
      - name: install packages
        run: |
          sudo apt-get -y remove libzmq* || true
          sudo apt-get -y install software-properties-common
          sudo apt-get -y install gcc-9 g++-9

      - name: Use g++-9 and gcov-9 by default
        run: |
          echo "Updating all needed alternatives"
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-9 9
          sudo update-alternatives --install /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-9 9
          sudo update-alternatives --install /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-9 9
          echo "Checking alternative for gcc"
          which gcc
          gcc --version
          echo "Checking alternative for g++"
          which g++
          g++ --version
          echo "Checking alternative for gcov"
          which gcov
          gcov --version
          echo "Checking alternative for gcov-dump"
          which gcov-dump
          gcov-dump --version
          echo "Checking alternative for gcov-tool"
          which gcov-tool
          gcov-tool --version

      - name: Get newest lcov
        run: |
          # sudo apt-get install libcapture-tiny-perl
          echo "Removing previous lcov version..."
          sudo apt-get remove lcov || true
          echo "Installing newest lcov version..."
          rm -rf newer_lcov || true
          mkdir newer_lcov
          cd newer_lcov
          git clone https://github.com/linux-test-project/lcov --recursive --recurse-submodules
          cd lcov
          git checkout 92e2121
          sudo make install
          cd ..
          cd ..
          echo "Checking installed lcov version..."
          which lcov
          lcov --version

      - name: Submodule update
        run: |
          rm -rf ./libconsensus || true
          ls -1
          git submodule update --init --recursive

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
          restore-keys: |
            ${ { matrix.config.name } }-ccache-
      - name: Update gcc-9
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9
      - name: Build dependencies
        run: |
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd deps
          #######################################./clean.sh
          rm -f ./libwebsockets-from-git.tar.gz
          ./build.sh DEBUG=1 PARALLEL_COUNT=$(nproc)
          cd ..
      - name: Configure all
        run: |
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          mkdir -p build
          cd build
          # -DCMAKE_C_FLAGS=-O3 -DCMAKE_CXX_FLAGS=-O3
          cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCOVERAGE=$CODE_COVERAGE ..
          cd ..
      - name: Build all
        run: |
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make testeth -j$(nproc)
          cd ..
      - name: Testeth verbosity 1
        continue-on-error: true
        id: testethVerbosity1
        run : |
          #first run with verbosity 1. If test fails, rerun with verbosity 4
          cd build/test
          export NO_NTP_CHECK=1
          export NO_ULIMIT_CHECK=1          
          # we specifically run each test for easier log review
          testeth -t BlockchainTests -- --express
          testeth -t TransactionTests -- --express
          testeth -t VMTests -- --express
          testeth -t LevelDBTests -- --express
          testeth -t SharedSpaceTests -- --express
          testeth -t SealEngineTests -- --express
          testeth -t SealEngineTests -- --express
          testeth -t BlockChainMainNetworkSuite -- --express
          testeth -t BlockChainFrontierSuite -- --express
          testeth -t BlockQueueSuite -- --express
          testeth -t ClientBase -- --express
          testeth -t EstimateGas -- --express
          testeth -t IMABLSPublicKey -- --express
          testeth -t ClientSnapshotsSuite -- --express
          testeth -t ExtVmSuite -- --express
          testeth -t GasPricer -- --express
          testeth -t BasicTests -- --express
          testeth -t InstanceMonitorSuite -- --express
          testeth -t PrecompiledTests -- --express
          testeth -t SkaleHostSuite -- --express
          testeth -t StateUnitTests -- --express
          testeth -t libethereum -- --express
          testeth -t TransactionQueueSuite -- --express
          testeth -t LegacyVMSuite -- --express
          testeth -t SkaleInterpreterSuite -- --express
          testeth -t SnapshotSigningTestSuite -- --express
          testeth -t HashSnapshotTestSuite
          testeth -t BtrfsTestSuite -- --express
          testeth -t SkUtils -- --express
          testeth -t BlockChainTestSuite -- --express
          testeth -t TestHelperSuite -- --express
          testeth -t LevelDBHashBase -- --express
          testeth -t memDB -- --express
          testeth -t OverlayDBTests -- --express
          testeth -t AccountHolderTest -- --express
          testeth -t ClientTests -- --express
          testeth -t JsonRpcSuite  -- --express
          testeth -t SingleConsensusTests  -- --express
          testeth -t ConsensusTests  -- --express
          cd ..     
      - name: Testeth verbosity 4
        if: steps.testethVerbosity1.outcome == 'failure'      
        run : |
          # Since tests failed, we are rerunning them with higher verbosity
          # ToDo: add logic to only re-run failed tests
          cd build/test      
          export NO_NTP_CHECK=1
          export NO_ULIMIT_CHECK=1          
          testeth -t BlockchainTests -- --express --verbosity 4
          testeth -t TransactionTests -- --express --verbosity 4
          testeth -t VMTests -- --express --verbosity 4
          testeth -t LevelDBTests -- --express --verbosity 4
          testeth -t SharedSpaceTests -- --express --verbosity 4
          testeth -t SealEngineTests -- --express --verbosity 4
          testeth -t SealEngineTests -- --express --verbosity 4
          testeth -t BlockChainMainNetworkSuite -- --express --verbosity 4
          testeth -t BlockChainFrontierSuite -- --express --verbosity 4
          testeth -t BlockQueueSuite -- --express --verbosity 4
          testeth -t ClientBase -- --express --verbosity 4
          testeth -t EstimateGas -- --express --verbosity 4
          testeth -t IMABLSPublicKey -- --express --verbosity 4
          testeth -t ClientSnapshotsSuite -- --express --verbosity 4
          testeth -t ExtVmSuite -- --express --verbosity 4
          testeth -t GasPricer -- --express --verbosity 4
          testeth -t BasicTests -- --express --verbosity 4
          testeth -t InstanceMonitorSuite -- --express --verbosity 4
          testeth -t PrecompiledTests -- --express --verbosity 4
          testeth -t SkaleHostSuite -- --express --verbosity 4
          testeth -t StateUnitTests -- --express --verbosity 4
          testeth -t libethereum -- --express --verbosity 4
          testeth -t TransactionQueueSuite -- --express --verbosity 4
          testeth -t LegacyVMSuite -- --express --verbosity 4
          testeth -t SkaleInterpreterSuite -- --express --verbosity 4
          testeth -t SnapshotSigningTestSuite -- --express --verbosity 4
          testeth -t HashSnapshotTestSuite --verbosity 4
          testeth -t BtrfsTestSuite -- --express --verbosity 4
          testeth -t SkUtils -- --express --verbosity 4
          testeth -t BlockChainTestSuite -- --express --verbosity 4
          testeth -t TestHelperSuite -- --express --verbosity 4
          testeth -t LevelDBHashBase -- --express --verbosity 4
          testeth -t memDB -- --express --verbosity 4
          testeth -t OverlayDBTests -- --express --verbosity 4
          testeth -t AccountHolderTest -- --express --verbosity 4
          testeth -t ClientTests -- --express --verbosity 4
          testeth -t JsonRpcSuite  -- --express --verbosity 4
          testeth -t SingleConsensusTests  -- --express --verbosity 4
          testeth -t ConsensusTests  -- --express --verbosity 4    
          cd ..
      - run: |
          sudo umount build/test/btrfs || true
          sudo rm -rf /tmp/tmp*
          sudo rm -rf /tmp/*.db
        if: ${{ always() }}
        continue-on-error: true
