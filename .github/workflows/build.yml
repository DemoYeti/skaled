name: Build and test skaled
on: [push]
defaults:
  run:
    shell: bash
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Extract repo name
        run:   echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        shell: bash
      - name: Extract branch name
        run: echo "::set-env name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
      - name: checkout
        uses: actions/checkout@v1
      - name: Submodule update
        run: git submodule update --init --recursive
      - name: update apt
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test;

      - name: Cleanup
        run: |
          sudo apt-get autoremove -y >/dev/null 2>&1 && \
          sudo apt-get autoclean -y >/dev/null 2>&1  && \
          sudo rm -rf /usr/local/lib/android >/dev/null 2>&1 && \
          docker rmi $(docker image ls -aq) >/dev/null 2>&1

      - name: Install packages
        run: |
          sudo apt-get update; sudo apt-get install -yq build-essential gcc-7 g++-7 \
          make ccache libtool pkg-config autoconf autogen automake autopoint \
          python python-pip sed shtool texinfo gperf gawk wget git flex bison yasm \
          clang-format-6.0 btrfs-progs doxygen vim nettle-dev gnutls-dev \
          libhiredis-dev redis-server google-perftools libgoogle-perftools-dev lcov

      - name: Install cmake 3.10
        run: |
          sudo apt-get remove cmake || true
          wget --no-check-certificate https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.sh && \
          chmod +x cmake-3.10.0-Linux-x86_64.sh && \
          ./cmake-3.10.0-Linux-x86_64.sh --skip-license --include-subdir && \
          sudo ln -sf `pwd`/cmake-3.10.0-Linux-x86_64/bin/* /usr/local/bin

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
          restore-keys: |
            ${ { matrix.config.name } }-ccache-
      - name: Build dependencies
        run: |
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd deps
          ./build.sh PARALLEL_COUNT=$(nproc)
          cd ..
      - name: Configure all
        run: |
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCOVERAGE=$CODE_COVERAGE ..
          cd ..
      - name: Format-check source code
        run: |
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make format-check
          cd ..
      - name: Build all
        run: |
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make -j$(nproc)
          cd ..
      - name: Testeth
        run : |
          cd build/test
          ./testeth -- --express
          sudo NO_ULIMIT_CHECK=1 ./testeth -t BtrfsTestSuite -- --all
          sudo NO_ULIMIT_CHECK=1 ./testeth -t HashSnapshotTestSuite -- --all
          sudo NO_ULIMIT_CHECK=1 ./testeth -t ClientSnapshotsSuite -- --all
          cd ..
          # Create lcov report
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
          lcov --remove coverage.info 'deps/*' --output-file coverage.info # filter dependency files
          lcov --remove coverage.info 'libconsensus/deps/*' --output-file coverage.info # filter dependency files
          lcov --remove coverage.info 'libconsensus/libBLS/deps/*' --output-file coverage.info # filter dependency files
          lcov --remove coverage.info '.hunter/*' --output-file coverage.info # filter dependency files
          #- lcov --list coverage.info # debug info

          # Uploading report to CodeCov
          bash <(curl -s https://codecov.io/bash) -f coverage.info -t $CODECOV_TOKEN || echo "Codecov did not collect coverage reports" 
          cd ..
      - name: Build and publish container
        if: github.event.pull_request.merged
        run: |
          cp build/skaled/skaled ../scripts/skale_build/executable/
          export BRANCH=${GITHUB_REF##*/}
          echo "Branch $BRANCH"
          export VERSION=$(bash ./scripts/calculate_version.sh)
          echo "::set-env name=VERSION::$VERSION"
          echo "Version $VERSION"
          export RELEASE=true
          echo "::set-env name=RELEASE::$RELEASE"
          bash ./scripts/build_and_publish.sh
      - name: Create Release
        if: github.event.pull_request.merged
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: true






